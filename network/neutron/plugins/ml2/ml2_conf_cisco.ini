[ml2_cisco]

# (StrOpt) A short prefix to prepend to the VLAN number when creating a
# VLAN interface. For example, if an interface is being created for
# VLAN 2001 it will be named 'q-2001' using the default prefix.
# The total length allowed for the prefix name and VLAN is 32 characters,
# the prefix will be truncated if the total length is greater than 32.
#
# vlan_name_prefix = q-
# Example: vlan_name_prefix = vnet-

# (BoolOpt) A flag to enable round robin scheduling of routers for SVI.
# svi_round_robin = False

#
# (StrOpt) The name of the physical_network managed via the Cisco Nexus Switch.
# This string value must be present in the ml2_conf.ini network_vlan_ranges
# variable.
#
# managed_physical_network =
# Example: managed_physical_network = physnet1

# Cisco Nexus Switch configurations.
# Each switch to be managed by Openstack Neutron must be configured here.
#
# Cisco Nexus Switch Format.
# [ml2_mech_cisco_nexus:<IP address of switch>]
# <hostname>=<intf_type:port>       (1)
# ssh_port=<ssh port>               (2)
# username=<credential username>    (3)
# password=<credential password>    (4)
# nve_src_intf=<loopback number>    (5)
# physnet=<physical network>        (6)
#
# (1) For each host connected to a port on the switch, specify the hostname
#     and the Nexus physical port (interface) it is connected to.
#     Valid intf_type's are 'ethernet' and 'port-channel'.
#     The default setting for <intf_type:> is 'ethernet' and need not be
#     added to this setting.
# (2) The TCP port for connecting via SSH to manage the switch. This is
#     port number 22 unless the switch has been configured otherwise.
# (3) The username for logging into the switch to manage it.
# (4) The password for logging into the switch to manage it.
# (5) Only valid if VXLAN overlay is configured and vxlan_global_config is
#     set to True.
#     The NVE source interface is a loopback interface that is configured on
#     the switch with valid /32 IP address. This /32 IP address must be known
#     by the transient devices in the transport network and the remote VTEPs.
#     This is accomplished by advertising it through a dynamic routing protocol
#     in the transport network. (NB: If no nve_src_intf is defined then a
#     default setting of 0 (creates "loopback0") will be used.)
# (6) Only valid if VXLAN overlay is configured.
#     The physical network name defined in the network_vlan_ranges variable
#     (defined under the ml2_type_vlan section) that this switch is controlling.
#     The configured 'physnet' is the physical network domain that is connected
#     to this switch. The vlan ranges defined in network_vlan_ranges for a
#     a physical network are allocated dynamically and are unique per physical
#     network. These dynamic vlans may be reused across physical networks.
#
# Example:
# [ml2_mech_cisco_nexus:1.1.1.1]
# compute1=1/1
# compute2=ethernet:1/2
# compute3=port-channel:1
# ssh_port=22
# username=admin
# password=mySecretPassword
# nve_src_intf=1
# physnet=physnet1

# (StrOpt) A short prefix to prepend to the VLAN number when creating a
# provider VLAN interface. For example, if an interface is being created
# for provider VLAN 3003 it will be named 'p-3003' using the default prefix.
# The total length allowed for the prefix name and VLAN is 32 characters,
# the prefix will be truncated if the total length is greater than 32.
#
# provider_vlan_name_prefix = p-
# Example: provider_vlan_name_prefix = PV-

# (BoolOpt) A flag indicating whether OpenStack networking should manage the
# creation and removal of VLANs for provider networks on the Nexus
# switches. If the flag is set to False then OpenStack will not create or
# remove VLANs for provider networks, and the administrator needs to
# manage these interfaces manually or by external orchestration.
#
# provider_vlan_auto_create = True

# (BoolOpt) A flag indicating whether OpenStack networking should manage
# the adding and removing of provider VLANs from trunk ports on the Nexus
# switches. If the flag is set to False then OpenStack will not add or
# remove provider VLANs from trunk ports, and the administrator needs to
# manage these operations manually or by external orchestration.
#
# provider_vlan_auto_trunk = True

# (BoolOpt) A flag indicating whether OpenStack networking should manage the
# creating and removing of the Nexus switch VXLAN global settings of 'feature
# nv overlay', 'feature vn-segment-vlan-based', 'interface nve 1' and the NVE
# subcommand 'source-interface loopback #'. If the flag is set to False
# (default) then OpenStack will not add or remove these VXLAN settings, and
# the administrator needs to manage these operations manually or by  external
# orchestration.
#
# vxlan_global_config = True

# (BoolOpt) To make Nexus device persistent by running the Nexus
# CLI 'copy run start' after applying successful configurations.
# (default) This flag defaults to False keep consistent with
# existing functionality.
#
# persistent_switch_config = False

# (IntOpt) Time interval to check the state of the Nexus device.
# (default) This value defaults to 0 seconds which disables this
# functionality.  When enabled, 30 seconds is suggested.
#
# switch_heartbeat_time = 0

# (IntOpt) Number of times to attempt config replay with switch.
# This variable depends on switch_heartbeat_time being enabled.
# (default) This value defaults to 3
#
# switch_replay_count = 3

[ml2_type_nexus_vxlan]
# (ListOpt) Comma-separated list of <vni_min>:<vni_max> tuples enumerating
# ranges of VXLAN Network IDs that are available for tenant network allocation.
#
# vni_ranges =
# Example: 100:1000,2000:6000
#
# (ListOpt) Multicast groups for the VXLAN interface. When configured, will
# enable sending all broadcast traffic to this multicast group. Comma separated
# list of min:max ranges of multicast IP's.
# NOTE: must be a valid multicast IP, invalid IP's will be discarded
#
# mcast_ranges =
# Example: mcast_ranges = 224.0.0.1:224.0.0.3,224.0.1.1:224.0.1.

[ml2_cisco_apic]

# Hostname:port list of APIC controllers
# apic_hosts = 1.1.1.1:80, 1.1.1.2:8080, 1.1.1.3:80

# Username for the APIC controller
# apic_username = user

# Password for the APIC controller
# apic_password = password

# Whether use SSl for connecting to the APIC controller or not
# apic_use_ssl = True

# How to map names to APIC: use_uuid or use_name
# apic_name_mapping = use_name

# Names for APIC objects used by Neutron
# Note: When deploying multiple clouds against one APIC,
#       these names must be unique between the clouds.
# apic_vmm_domain = openstack
# apic_vlan_ns_name = openstack_ns
# apic_node_profile = openstack_profile
# apic_entity_profile = openstack_entity
# apic_function_profile = openstack_function
# apic_app_profile_name = openstack_app
# Agent timers for State reporting and topology discovery
# apic_sync_interval = 30
# apic_agent_report_interval = 30
# apic_agent_poll_interval = 2

# Specify your network topology.
# This section indicates how your compute nodes are connected to the fabric's
# switches and ports. The format is as follows:
#
# [apic_switch:<swich_id_from_the_apic>]
# <compute_host>,<compute_host> = <switchport_the_host(s)_are_connected_to>
#
# You can have multiple sections, one for each switch in your fabric that is
# participating in OpenStack. e.g.
#
# [apic_switch:17]
# ubuntu,ubuntu1 = 1/10
# ubuntu2,ubuntu3 = 1/11
#
# [apic_switch:18]
# ubuntu5,ubuntu6 = 1/1
# ubuntu7,ubuntu8 = 1/2

# Describe external connectivity.
# In this section you can specify the external network configuration in order
# for the plugin to be able to teach the fabric how to route the internal
# traffic to the outside world. The external connectivity configuration
# format is as follows:
#
# [apic_external_network:<externalNetworkName>]
# switch = <switch_id_from_the_apic>
# port = <switchport_the_external_router_is_connected_to>
# encap = <encapsulation>
# cidr_exposed = <cidr_exposed_to_the_external_router>
# gateway_ip = <ip_of_the_external_gateway>
#
# An example follows:
# [apic_external_network:network_ext]
# switch=203
# port=1/34
# encap=vlan-100
# cidr_exposed=10.10.40.2/16
# gateway_ip=10.10.40.1


[ml2_cisco_n1kv]

# (StrOpt) Name of the policy profile to be associated with a port when no
# policy profile is specified during port creates.
# default_policy_profile = default-pp

# (StrOpt) Name of the VLAN network profile to be associated with a network.
# default_vlan_network_profile = default-vlan-np

# (StrOpt) Name of the VXLAN network profile to be associated with a network.
# default_vxlan_network_profile = default-vxlan-np

# (IntOpt) Time in seconds for which the plugin polls the VSM for updates in
# policy profiles.
# poll_duration = 60

# (IntOpt) Timeout duration in seconds for the http request
# http_timeout = 15

# (BoolOpt) Specify whether tenants are restricted from accessing all the
# policy profiles.
# Default value: False, indicating all tenants can access all policy profiles.
#
# restrict_policy_profiles = False

# Describe Cisco N1KV VSM connectivity
# In this section you can specify connectivity details in order for plugin
# to connect to N1KV Virtual Supervisor Module (VSM).
#
# n1kv_vsm_ips =<vsm1_ip>,<vsm2_ip>,....
# username = <username>
# password = <password>
#
# An example would be:
# n1kv_vsm_ips = 1.1.1.1,1.1.1.2
# username = user
# password = password

[ml2_cisco_ucsm]

# Cisco UCS Manager IP address
# ucsm_ip=1.1.1.1

# Username to connect to UCS Manager
# ucsm_username=user

# Password to connect to UCS Manager
# ucsm_password=password

# SR-IOV and VM-FEX vendors supported by this plugin
# xxxx:yyyy represents vendor_id:product_id
# supported_pci_devs = ['2222:3333', '4444:5555']

# Hostname to Service profile mapping for UCS Manager
# controlled compute hosts
# ucsm_host_list=Hostname1:Serviceprofile1, Hostname2:Serviceprofile2
